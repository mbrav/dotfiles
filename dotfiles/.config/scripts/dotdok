#!/usr/bin/env bash

set -euo pipefail

# Set script_dir
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
docker_tag="mbrav/dotfiles:latest"
uid="$(id -u)"
gid="$(id -g)"
user="${USER:-mbrav}"
mount_from="$(pwd)"
mount_to="/home/${user}/mount"
container_runtime="docker"
build_opts=()
pass_home=false

# Source util functions if present
if [[ -f "${script_dir}/_util" ]]; then
	source "${script_dir}/_util"
else
	echo "Missing _util file. Please ensure it exists in ${script_dir}." >&2
	exit 1
fi

ran_col_str "Utility for running mbrav dotfiles inside an ephemeral container"

for ((i = 0; i <= 100; i++)); do
	# Pure bash micro sleeps (for the example).
	sleep 0.1

	# Print the bar.
	progress_bar "$i"
done

exit 0

# Display help
display_help() {
	cat <<EOF
Usage: $0 [options]

Options:
  -h         Show this help message
  -u         Mount user's home directory instead of current working dir
  -p         Use Podman instead of Docker
  -n         No cache during image build (force rebuild)
EOF
	exit 0
}

# Parse CLI options
while getopts "hupn" opt; do
	case "${opt}" in
	h) display_help ;;
	u)
		pass_home=true
		mount_from="${HOME}"
		mount_to="/home/${user}"
		;;
	p) container_runtime="podman" ;;
	n) build_opts+=(--no-cache) ;;
	*)
		error_msg "Unknown option: -${OPTARG}"
		exit 1
		;;
	esac
done

# Detect if running on macOS
if [[ "$(uname)" == "Darwin" ]]; then
	info_msg "Running on macOS. Adjusting GID to avoid permission issues."
	gid="1000"
fi

# Determine available runtime if not explicitly set
if ! command -v "${container_runtime}" >/dev/null; then
	if command -v docker >/dev/null; then
		container_runtime="docker"
	elif command -v podman >/dev/null; then
		container_runtime="podman"
	else
		error_msg "Neither docker nor podman found. Please install one of them."
		exit 1
	fi
fi

info_msg "Container runtime: ${container_runtime}"
info_msg "Using user: ${user}"
info_msg "UID/GID:    ${uid}/${gid}"
info_msg "Mount from: ${mount_from}"
info_msg "Mount to:   ${mount_to}"

# Build the image if it doesn't exist
if ! "${container_runtime}" image inspect "${docker_tag}" >/dev/null 2>&1; then
	info_msg "Image not found. Building container image..."

	"${container_runtime}" build "${build_opts[@]}" \
		--progress=plain \
		-f "${script_dir}/../../../Dockerfile" \
		--build-arg DOCKER_USER="${user}" \
		--build-arg DOCKER_UID="${uid}" \
		--build-arg DOCKER_GID="${gid}" \
		--tag "${docker_tag}" \
		"${script_dir}/../../../." &&
		success_msg "Image ${docker_tag} built successfully"
else
	info_msg "Container image already exists, skipping build."
fi

# Print mount if source exists
mount_if() {
	[[ -e "$1" ]] && echo "--mount type=bind,source=${1},target=${2},readonly"
}

info_msg "Running ${docker_tag} with user ${uid}:${gid}"

"${container_runtime}" run -it --rm \
	--name "tmp-${mount_from##*/}" \
	--user "${uid}:${gid}" \
	--mount type=bind,source="${mount_from}",target="${mount_to}" \
	"$(mount_if "/var/log" "/var/log")" \
	"${docker_tag}" &&
	success_msg "Exited container ${docker_tag}"
